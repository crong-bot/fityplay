{"version":3,"sources":["components/Transcompile.js","small.js","components/prefunc.js","components/chartmaker.js","lexer.js","generate.js","Editor.js","components/LogsContainer.js","components/map1.png","components/tree.png","App.js","index.js"],"names":["nearley","require","generate","default","Transcompile","props","useState","database","setDatabase","chartdatas","setChartdatas","chartshape","setChartshape","data","keys","values","labels","shape","useEffect","parser","Parser","Grammar","fromCompiled","grammar","feed","value","parserResult","results","undefined","line","lines","concat","fityfunc","ww","가람시","eval","e","newerror","reportError","message","console","info","includes","replace","chartmaker","React","memo","id","x","mylexer","Lexer","ParserRules","name","symbols","postprocess","d","label","type","statements","has","identifier","literal","var_name","array_name","array_value","fun_name","arguments","eol","indent","first_condition","first_statement","has_middle_condition","middle_statement","has_last_statement","last_statement","dedent","middle_condition","map","has_last_condition","operator","v","string","iterator","a","b","statement","calculator","number","ws","ParserStart","module","exports","window","prefunc","COLORS","RADIAN","Math","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","Object","stackId","labelLine","entry","length","indentifiedLexer","compile","nl","match","lineBreaks","comment","lparen","rparen","lbracke","rbracke","lbrace","rbrace","fatarrow","assign","keyword","tp","node","join","varName","jsExpr","funName","arg_list","arg","i","arrayname","log","Editor","language","onChange","className","onBeforeChange","editor","options","lint","lineNumbers","mode","lineWrapping","theme","LogsContainer","logs","setLogs","scrollbottom","useRef","scroll","current","scrollHeight","clientHeight","scrollTo","scrollexec","Hook","currLogs","Unhook","ref","variant","filter","styles","BASE_BACKGROUND_COLOR","BASE_FONT_SIZE","LOG_ERROR_BACKGROUND","LOG_WARN_BACKGROUND","LOG_INFO_BACKGROUND","searchKeywords","App","code","setCode","ab","setAb","onClick","src","images","alt","tree","ReactDOM","render","document","getElementById"],"mappings":"+vCAQMA,QAAUC,oBAAQ,KAClBC,SAAWD,oBAAQ,KAAkBE,QAE3C,SAASC,aAAaC,OAAQ,IAAD,UACKC,oDAAS,IADd,gLACpBC,SADoB,cACVC,YADU,yBAESF,oDAAS,IAFlB,iLAEpBG,WAFoB,cAERC,cAFQ,yBAGSJ,oDAAS,IAHlB,iLAGpBK,WAHoB,cAGRC,cAHQ,cAIvBC,KAAO,GACPC,KACAC,OACAC,OAAS,2BACTC,MAAQ,GAiCZ,OA/BAC,sDAAU,WACR,IAAMC,OAAS,IAAInB,QAAQoB,OAAOpB,QAAQqB,QAAQC,aAAaC,2CAC/DJ,OAAOK,KAAKnB,MAAMoB,OAClB,IAAMC,aAAeP,OAAOQ,QAC5B,QAAwBC,IAApBF,aAAa,GAAkB,CACjC,IAAMG,KAAO3B,SAASwB,aAAa,GAAG,IAChCI,MAAQD,KAAKE,OAAO,KAAMC,4CAChC,IACE,IAAIC,GAAKC,oDACTC,KAAKL,OACL,MAAOM,GACP,IAAMC,SAAWC,YAAYF,EAAEG,SAC/BC,QAAQC,KAAKJ,gBAGfG,QAAQC,KAAK,wEAGf,SAASH,YAAYF,GACnB,OAA8B,IAA1BA,EAAEM,SAAS,WACIN,EAAEO,QAAQ,iBAAkB,oEAER,IAA5BP,EAAEM,SAAS,aACHN,EAAEO,QAAQ,YAAa,uCADnC,EAKT/B,cAAcK,OACdP,cAAcG,QACb,CAACR,MAAMoB,QAGR,6HACGmB,mDAAWjC,WAAYF,cAKfoC,mEAAMC,KAAK1C,e,0DCxD1B,WACE,SAAS2C,EAAGC,GACV,OAAOA,EAAE,GAGX,IAAMC,EAAUhD,EAAQ,KAMpBsB,EAAU,CACZ2B,MAAOD,EACPE,YAAa,CACX,CAAEC,KAAM,aAAcC,QAAS,CAAC,WAAYC,YAAaP,GACzD,CAAEK,KAAM,iBAAkBC,QAAS,IACnC,CACED,KAAM,iBACNC,QAAS,CAAC,iBAAkB,aAC5BC,YAAa,SAAiBC,GAC5B,OAAOA,EAAE,GAAGxB,OAAO,CAACwB,EAAE,OAG1B,CACEH,KAAM,UACNC,QAAS,CAAC,kBACVC,YAAa,SAACzC,GAAD,MAAU,CACrB,CACE2C,MAAO,UACPC,KAAM,UACNC,WAAY7C,EAAK,OAIvB,CAAEuC,KAAM,YAAaC,QAAS,CAAC,aAAc,MAAOC,YAAaP,GACjE,CAAEK,KAAM,YAAaC,QAAS,CAAC,WAAY,MAAOC,YAAaP,GAC/D,CAAEK,KAAM,YAAaC,QAAS,CAAC,WAAY,MAAOC,YAAaP,GAC/D,CAAEK,KAAM,YAAaC,QAAS,CAAC,YAAa,MAAOC,YAAaP,GAChE,CAAEK,KAAM,YAAaC,QAAS,CAAC,SAAU,MAAOC,YAAaP,GAC7D,CACEK,KAAM,aACNC,QAAS,CACPJ,EAAQU,IAAI,cAAgB,CAAEF,KAAM,cAAiBG,WACrD,IACA,CAAEC,QAAS,KACX,IACA,QAEFP,YAAa,SAACzC,GACZ,MAAO,CACL2C,MAAO,QACPC,KAAM,aACNK,SAAUjD,EAAK,GACfY,MAAOZ,EAAK,MAIlB,CACEuC,KAAM,aACNC,QAAS,CACPJ,EAAQU,IAAI,cAAgB,CAAEF,KAAM,cAAiBG,WACrD,IACA,CAAEC,QAAS,KACX,IACA,SAEFP,YAAa,SAACzC,GACZ,MAAO,CACL2C,MAAO,QACPC,KAAM,QACNM,WAAYlD,EAAK,GACjBmD,YAAanD,EAAK,MAIxB,CAAEuC,KAAM,kCAAmCC,QAAS,CAAC,WAAY,MACjE,CACED,KAAM,kBACNC,QAAS,CAAC,mCACVC,YAAaP,GAEf,CACEK,KAAM,kBACNC,QAAS,GACTC,YAAa,SAAUC,GACrB,OAAO,OAGX,CACEH,KAAM,WACNC,QAAS,CACPJ,EAAQU,IAAI,cAAgB,CAAEF,KAAM,cAAiBG,WACrD,IACA,CAAEC,QAAS,KACX,IACA,kBACA,CAAEA,QAAS,MAEbP,YAAa,SAACzC,GACZ,MAAO,CACL2C,MAAO,QACPC,KAAM,WACNQ,SAAUpD,EAAK,GACfqD,UAAWrD,EAAK,GAAKA,EAAK,GAAG,GAAK,MAIxC,CACEuC,KAAM,WACNC,QAAS,CACP,CAAEQ,QAAS,gBACX,IACA,YACAZ,EAAQU,IAAI,OAAS,CAAEF,KAAM,OAAUU,IACvClB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAaW,OAC7C,WAEFd,YAAa,SAACzC,GACZ,MAAO,CACL2C,MAAO,QACPC,KAAM,UACNY,gBAAiBxD,EAAK,GACtByD,gBAAgB,YAAKzD,EAAK,IAE1B0D,sBAAsB,EACtBC,sBAAkB5C,EAElB6C,oBAAoB,EACpBC,oBAAgB9C,KAItB,CACEwB,KAAM,WACNC,QAAS,CACP,CAAEQ,QAAS,gBACX,IACA,YACAZ,EAAQU,IAAI,OAAS,CAAEF,KAAM,OAAUU,IACvClB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAaW,OAC7C,UACAnB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAakB,OAC7C,CAAEd,QAAS,gBACX,IACAZ,EAAQU,IAAI,OAAS,CAAEF,KAAM,OAAUU,IACvClB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAaW,OAC7C,WAEFd,YAAa,SAACzC,GACZ,MAAO,CACL2C,MAAO,QACPC,KAAM,UACNY,gBAAiBxD,EAAK,GACtByD,gBAAiBzD,EAAK,GAEtB0D,sBAAsB,EACtBC,sBAAkB5C,EAElB6C,oBAAoB,EACpBC,eAAe,YAAK7D,EAAK,QAI/B,CAAEuC,KAAM,kBAAmBC,QAAS,IACpC,CACED,KAAM,kCACNC,QAAS,CACP,CAAEQ,QAAS,sBACX,IACA,YACAZ,EAAQU,IAAI,OAAS,CAAEF,KAAM,OAAUU,IACvClB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAaW,OAC7C,UACAnB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAakB,SAGjD,CACEvB,KAAM,kBACNC,QAAS,CAAC,kBAAmB,mCAC7BC,YAAa,SAAiBC,GAC5B,OAAOA,EAAE,GAAGxB,OAAO,CAACwB,EAAE,OAG1B,CACEH,KAAM,WACNC,QAAS,CACP,CAAEQ,QAAS,gBACX,IACA,YACAZ,EAAQU,IAAI,OAAS,CAAEF,KAAM,OAAUU,IACvClB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAaW,OAC7C,UACAnB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAakB,OAC7C,kBACA,CAAEd,QAAS,sBACX,IACA,YACAZ,EAAQU,IAAI,OAAS,CAAEF,KAAM,OAAUU,IACvClB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAaW,OAC7C,WAEFd,YAAa,SAACzC,GACZ,MAAO,CACL2C,MAAO,QACPC,KAAM,UACNY,gBAAiBxD,EAAK,GACtByD,gBAAiBzD,EAAK,GAEtB0D,sBAAsB,EACtBK,iBAAiB,GAAD,mBAAM/D,EAAK,GAAGgE,KAAI,SAACpD,GAAD,OAAWA,EAAM,OAAnC,CAAwCZ,EAAK,MAC7D2D,iBAAiB,GAAD,mBAAM3D,EAAK,GAAGgE,KAAI,SAACpD,GAAD,OAAWA,EAAM,OAAnC,CAAwCZ,EAAK,MAE7DiE,oBAAoB,EACpBJ,oBAAgB9C,KAItB,CACEwB,KAAM,kCACNC,QAAS,CACP,CAAEQ,QAAS,sBACX,IACA,YACAZ,EAAQU,IAAI,OAAS,CAAEF,KAAM,OAAUU,IACvClB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAaW,OAC7C,UACAnB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAakB,SAGjD,CAAEvB,KAAM,kBAAmBC,QAAS,CAAC,oCACrC,CACED,KAAM,kCACNC,QAAS,CACP,CAAEQ,QAAS,sBACX,IACA,YACAZ,EAAQU,IAAI,OAAS,CAAEF,KAAM,OAAUU,IACvClB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAaW,OAC7C,UACAnB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAakB,SAGjD,CACEvB,KAAM,kBACNC,QAAS,CAAC,kBAAmB,mCAC7BC,YAAa,SAAiBC,GAC5B,OAAOA,EAAE,GAAGxB,OAAO,CAACwB,EAAE,OAG1B,CACEH,KAAM,WACNC,QAAS,CACP,CAAEQ,QAAS,gBACX,IACA,YACAZ,EAAQU,IAAI,OAAS,CAAEF,KAAM,OAAUU,IACvClB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAaW,OAC7C,UACAnB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAakB,OAC7C,kBACA,CAAEd,QAAS,gBACX,IACAZ,EAAQU,IAAI,OAAS,CAAEF,KAAM,OAAUU,IACvClB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAaW,OAC7C,WAEFd,YAAa,SAACzC,GACZ,MAAO,CACL2C,MAAO,QACPC,KAAM,UACNY,gBAAiBxD,EAAK,GACtByD,gBAAiBzD,EAAK,GAEtB0D,sBAAsB,EACtBK,iBAAiB,YAAK/D,EAAK,GAAGgE,KAAI,SAACpD,GAAD,OAAWA,EAAM,OACnD+C,iBAAiB,YAAK3D,EAAK,GAAGgE,KAAI,SAACpD,GAAD,OAAWA,EAAM,OAEnDgD,oBAAoB,EACpBC,eAAe,YAAK7D,EAAK,QAI/B,CACEuC,KAAM,YACNC,QAAS,CACP,OACA,IACAJ,EAAQU,IAAI,YAAc,CAAEF,KAAM,YAAesB,SACjD,IACA,QAEFzB,YAAa,SAACzC,GACZ,MAAO,CACL4C,KAAM,YACNhC,MAAO,CAACZ,EAAK,GAAIA,EAAK,GAAIA,EAAK,OAIrC,CACEuC,KAAM,WACNC,QAAS,CAAC,QACVC,YAAa,SAACzC,GACZ,MAAO,CAACA,EAAK,MAGjB,CACEuC,KAAM,WACNC,QAAS,CAAC,WAAY,KAAM,QAC5BC,YAAa,SAACzC,GACZ,MAAM,GAAN,mBAAWA,EAAK,IAAhB,CAAoBA,EAAK,OAG7B,CAAEuC,KAAM,eAAgBC,QAAS,IACjC,CACED,KAAM,+BACNC,QAAS,CAAC,CAAEQ,QAAS,KAAO,IAAK,SAEnC,CACET,KAAM,eACNC,QAAS,CAAC,eAAgB,gCAC1BC,YAAa,SAAiBC,GAC5B,OAAOA,EAAE,GAAGxB,OAAO,CAACwB,EAAE,OAG1B,CACEH,KAAM,QACNC,QAAS,CACP,CAAEQ,QAAS,KACX,IACA,OACA,IACA,eACA,IACA,CAAEA,QAAS,MAEbP,YAAa,SAACzC,GACZ,MAAM,CAAEA,EAAK,IAAb,mBAAoBA,EAAK,GAAGgE,KAAI,SAACG,GAAD,OAAOA,EAAE,UAG7C,CACE5B,KAAM,OACNC,QAAS,CAACJ,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAawB,QACvD3B,YAAaP,GAEf,CACEK,KAAM,OACNC,QAAS,CACPJ,EAAQU,IAAI,cAAgB,CAAEF,KAAM,cAAiBG,YAEvDN,YAAaP,GAEf,CAAEK,KAAM,OAAQC,QAAS,CAAC,YAAaC,YAAaP,GACpD,CAAEK,KAAM,OAAQC,QAAS,CAAC,MAAOC,YAAaP,GAC9C,CACEK,KAAM,YACNC,QAAS,CACP,CAAEQ,QAAS,gBACX,KACA,OACA,IACAZ,EAAQU,IAAI,YAAc,CAAEF,KAAM,YAAeyB,SACjD,IACA,OACAjC,EAAQU,IAAI,OAAS,CAAEF,KAAM,OAAUU,IACvClB,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAaW,OAC7C,WAEFd,YAAa,SAACzC,GACZ,MAAO,CACL2C,MAAO,YACPC,KAAM,YACN0B,EAAGtE,EAAK,GACRqE,SAAUrE,EAAK,GACfuE,EAAGvE,EAAK,GACRwE,UAAWxE,EAAK,MAItB,CACEuC,KAAM,SACNC,QAAS,CAAC,CAAEQ,QAAS,gBAAQ,IAAK,QAClCP,YAAa,SAACC,GACZ,MAAO,CAAEE,KAAM,SAAUhC,MAAO8B,EAAE,MAGtC,CACEH,KAAM,IACNC,QAAS,CAAC,CAAEQ,QAAS,KAAO,IAAK,KAAM,IAAK,CAAEA,QAAS,MACvDP,YAAa,SAACC,GACZ,OAAOA,EAAE,KAGb,CAAEH,KAAM,IAAKC,QAAS,CAAC,UAAWC,YAAaP,GAC/C,CAAEK,KAAM,KAAMC,QAAS,CAAC,KAAMC,YAAaP,GAC3C,CACEK,KAAM,KACNC,QAAS,CAAC,KAAM,IAAK,CAAEQ,QAAS,KAAO,IAAK,KAC5CP,YAAa,SAACC,GACZ,MAAO,CAACA,EAAE,GAAIA,EAAE,GAAIA,EAAE,MAG1B,CACEH,KAAM,KACNC,QAAS,CAAC,KAAM,IAAK,CAAEQ,QAAS,KAAO,IAAK,KAC5CP,YAAa,SAACC,GACZ,MAAO,CAACA,EAAE,GAAIA,EAAE,GAAIA,EAAE,MAG1B,CAAEH,KAAM,KAAMC,QAAS,CAAC,MAAOC,YAAaP,GAC5C,CACEK,KAAM,KACNC,QAAS,CAAC,KAAM,IAAK,CAAEQ,QAAS,KAAO,IAAK,MAC5CP,YAAa,SAACC,GACZ,MAAO,CAACA,EAAE,GAAIA,EAAE,GAAIA,EAAE,MAG1B,CACEH,KAAM,KACNC,QAAS,CAAC,KAAM,IAAK,CAAEQ,QAAS,KAAO,IAAK,MAC5CP,YAAa,SAACC,GACZ,MAAO,CAACA,EAAE,GAAIA,EAAE,GAAIA,EAAE,MAG1B,CACEH,KAAM,MACNC,QAAS,CACPJ,EAAQU,IAAI,cAAgB,CAAEF,KAAM,cAAiB6B,YAEvDhC,YAAaP,GAEf,CACEK,KAAM,SACNC,QAAS,CAACJ,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAa8B,QACvDjC,YAAaP,GAEf,CAAEK,KAAM,SAAUC,QAAS,CAAC,SAAUC,YAAaP,GACnD,CACEK,KAAM,QACNC,QAAS,CACPJ,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAa8B,OAC7C,CAAE1B,QAAS,KACXZ,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAa8B,QAE/CjC,YAAa,SAACC,GAAD,MAAQ,CACnBC,MAAO,OACPC,KAAM,QACNhC,MAAO8B,EAAE,GAAKA,EAAE,GAAKA,EAAE,MAG3B,CAAEH,KAAM,WAAYC,QAAS,IAC7B,CACED,KAAM,WACNC,QAAS,CAAC,WAAYJ,EAAQU,IAAI,MAAQ,CAAEF,KAAM,MAAS+B,IAC3DlC,YAAa,SAAiBC,GAC5B,OAAOA,EAAE,GAAGxB,OAAO,CAACwB,EAAE,OAG1B,CAAEH,KAAM,IAAKC,QAAS,CAAC,aACvB,CAAED,KAAM,YAAaC,QAAS,CAACJ,EAAQU,IAAI,MAAQ,CAAEF,KAAM,MAAS+B,KACpE,CACEpC,KAAM,YACNC,QAAS,CAAC,YAAaJ,EAAQU,IAAI,MAAQ,CAAEF,KAAM,MAAS+B,IAC5DlC,YAAa,SAAiBC,GAC5B,OAAOA,EAAE,GAAGxB,OAAO,CAACwB,EAAE,OAG1B,CAAEH,KAAM,KAAMC,QAAS,CAAC,cACxB,CAAED,KAAM,YAAaC,QAAS,IAC9B,CACED,KAAM,YACNC,QAAS,CAAC,YAAaJ,EAAQU,IAAI,MAAQ,CAAEF,KAAM,MAAS+B,IAC5DlC,YAAa,SAAiBC,GAC5B,OAAOA,EAAE,GAAGxB,OAAO,CAACwB,EAAE,OAG1B,CACEH,KAAM,4BACNC,QAAS,CAACJ,EAAQU,IAAI,OAAS,CAAEF,KAAM,OAAUU,MAEnD,CACEf,KAAM,4BACNC,QAAS,CACP,4BACAJ,EAAQU,IAAI,OAAS,CAAEF,KAAM,OAAUU,KAEzCb,YAAa,SAAiBC,GAC5B,OAAOA,EAAE,GAAGxB,OAAO,CAACwB,EAAE,OAG1B,CAAEH,KAAM,qBAAsBC,QAAS,CAAC,8BACxC,CACED,KAAM,qBACNC,QAAS,CAACJ,EAAQU,IAAI,UAAY,CAAEF,KAAM,UAAakB,SAEzD,CAAEvB,KAAM,KAAMC,QAAS,CAAC,YAAa,wBAEvCoC,YAAa,cAEgD,qBAAnBC,EAAOC,QACjDD,EAAOC,QAAUpE,EAEjBqE,OAAOrE,QAAUA,EArfrB,GAwfeA,c,uDC3ff,kCAAO,IAAMsE,EAAO,8qC,oGCoBdC,EAAS,CAAC,UAAW,UAAW,UAAW,WAC3CC,EAASC,KAAKC,GAAK,IACnBC,EAAwB,SAAC,GAQxB,IAPLC,EAOI,EAPJA,GACAC,EAMI,EANJA,GACAC,EAKI,EALJA,SACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,QAGMC,GADF,EADJC,MAEeJ,EAA4C,IAA7BC,EAAcD,IACtCtD,EAAImD,EAAKM,EAAST,KAAKW,KAAKN,EAAWN,GACvCa,EAAIR,EAAKK,EAAST,KAAKa,KAAKR,EAAWN,GAE7C,OACE,sBACE/C,EAAGA,EACH4D,EAAGA,EACHE,KAAK,QACLC,WAAY/D,EAAImD,EAAK,QAAU,MAC/Ba,iBAAiB,UALnB,oBAOiB,IAAVR,GAAeS,QAAQ,GAP9B,QAYW,SAASrE,EAAWQ,EAAMvC,GACvC,MAAa,mCAATuC,EAEA,gCACE,uCACA,eAAC,IAAD,CACE8D,MAAO,IACPC,OAAQ,IACRtG,KAAMA,EACNuG,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,GAJlD,UAME,cAAC,IAAD,CAAeC,gBAAgB,QAC/B,cAAC,IAAD,CAAOC,QAAQ,SACf,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,CAAKA,QAASC,OAAO7G,KAAKD,EAAK,IAAI,GAAI+G,QAAQ,IAAId,KAAK,YACxD,cAAC,IAAD,CAAKY,QAASC,OAAO7G,KAAKD,EAAK,IAAI,GAAI+G,QAAQ,IAAId,KAAK,YACxD,cAAC,IAAD,CAAKY,QAASC,OAAO7G,KAAKD,EAAK,IAAI,GAAI+G,QAAQ,IAAId,KAAK,kBAI5C,yCAAT1D,EAEP,8BACE,yCAWc,6BAATA,EAEP,gCACE,uCACA,eAAC,IAAD,CAAU8D,MAAO,IAAKC,OAAQ,IAA9B,UACE,cAAC,IAAD,CACEtG,KAAMA,EACNsF,GAAI,IACJC,GAAI,IACJyB,WAAW,EACXrE,MAAO0C,EACPK,YAAa,IACbO,KAAK,UAPP,SASGjG,EAAKgE,KAAI,SAACiD,EAAOpB,GAAR,OACR,cAAC,IAAD,CAAMI,KAAMhB,EAAOY,EAAQZ,EAAOiC,eAGtC,cAAC,IAAD,UAMJ,8BACE,2C,kGC7GR,IAEMC,EAAmB,IAFF/H,EAAQ,KAEN,CAGhBA,EAAQ,KAAOgI,QAAQ,CAC5BzC,GAAI,SACJ0C,GAAI,CAAEC,MAAO,KAAMC,YAAY,GAC/BC,QAAS,WACT9C,OAAQ,gBACRN,OAAQ,0BACRC,SAAU,KACVH,SAAU,CAAC,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,KAClDO,WAAY,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,MACvCgD,OAAQ,IACRC,OAAQ,IACRC,QAAS,IACTC,QAAS,IACTC,OAAQ,IACRC,OAAQ,IACR/E,WAAY,kDACZgF,SAAU,KACVC,OAAQ,IACRC,QAAS,CAAC,eAAM,mBAkBpBpD,EAAOC,QAAUqC,G,0DCjCjB,SAASe,EAAGC,GACV,GAAkB,YAAdA,EAAKvF,KACP,MAAM,GAAN,OAAUuF,EAAKtF,WAAWmB,KAAI,SAACtB,GAAD,OAAOwF,EAAGxF,MAAI0F,KAAK,OAC5C,GAAkB,eAAdD,EAAKvF,KAAuB,CACrC,IAAMyF,EAAUF,EAAKlF,SAASrC,MACxB0H,EAASJ,EAAGC,EAAKvH,OAEvB,MADQ,cAAUyH,EAAV,cAAuBC,GAE1B,GAAkB,aAAdH,EAAKvF,KAAqB,CACnC,IAAM2F,EAAUJ,EAAK/E,SAASxC,MACxB4H,EAAWL,EAAK9E,UACnBW,KAAI,SAACyE,GACJ,OAAOP,EAAGO,MAEXL,KAAK,KACR,MAAM,GAAN,OAAUG,EAAV,YAAqBC,EAArB,KACK,GAAkB,YAAdL,EAAKvF,KACd,OAAIuF,EAAKzE,sBAAwByE,EAAKvE,mBAC9B,MAAN,OAAasE,EAAGC,EAAK3E,iBAArB,sBACE0E,EAAE,WAAF,cAAMC,EAAK1E,kBADb,oBAEE0E,EAAKpE,iBACJC,KAAI,SAACtB,EAAGgG,GAAJ,wBAAqBR,EAAGxF,GAAxB,cAAgCwF,EAAE,WAAF,cAAMC,EAAKxE,iBAAiB+E,KAA5D,QACJN,KAAK,MAJR,yBAKQF,EAAE,WAAF,cAAMC,EAAKtE,iBALnB,aAOSsE,EAAKzE,uBAAyByE,EAAKvE,mBACtC,MAAN,OAAasE,EAAGC,EAAK3E,iBAArB,sBACE0E,EAAE,WAAF,cAAMC,EAAK1E,kBADb,oBAEE0E,EAAKpE,iBACJC,KAAI,SAACtB,EAAGgG,GAAJ,wBAAqBR,EAAGxF,GAAxB,cAAgCwF,EAAE,WAAF,cAAMC,EAAKxE,iBAAiB+E,KAA5D,QACJN,KAAK,QACED,EAAKzE,sBAAwByE,EAAKvE,mBACtC,MAAN,OAAasE,EAAGC,EAAK3E,iBAArB,sBACE0E,EAAE,WAAF,cAAMC,EAAK1E,kBADb,0BAEQyE,EAAE,WAAF,cAAMC,EAAKtE,iBAFnB,KAIM,MAAN,OAAaqE,EAAGC,EAAK3E,iBAArB,sBACE0E,EAAE,WAAF,cAAMC,EAAK1E,kBADb,KAGG,GAAkB,cAAd0E,EAAKvF,KACd,OAAOuF,EAAKvH,MAAMoD,KAAI,SAACtB,GAAD,OAAOwF,EAAGxF,MAAI0F,KAAK,IACpC,GAAkB,UAAdD,EAAKvF,KAAkB,CAChC,IAAM+F,EAAYR,EAAKjF,WAAWtC,MAClC,MAAM,OAAN,OAAc+H,EAAd,aAA4BR,EAAKhF,YAC9Ba,KAAI,SAACtB,GACJ,OAAOwF,EAAGxF,MAEX0F,KAAK,KAJR,KAKK,GAAkB,cAAdD,EAAKvF,KAAsB,CACpC,IAAM0B,EAAI6D,EAAK7D,EAAE1D,MACX2D,EAAI4D,EAAK5D,EAAE3D,MACjB,MAAM,YAAN,OAAmB0D,EAAnB,eAA2BC,EAA3B,cAAkC2D,EAAE,WAAF,cAAMC,EAAK3D,YAA7C,OACK,MAAkB,WAAd2D,EAAKvF,MAES,aAAduF,EAAKvF,MAES,WAAduF,EAAKvF,MAES,WAAduF,EAAKvF,MAES,eAAduF,EAAKvF,MAES,eAAduF,EAAKvF,KATPuF,EAAKvH,WAYZe,QAAQiH,IAAI,kDAKDV,a,iJC5CAW,MAzBf,SAAgBrJ,GAAQ,IACdsJ,EAA8BtJ,EAA9BsJ,SAAUlI,EAAoBpB,EAApBoB,MAAOmI,EAAavJ,EAAbuJ,SAIzB,OACE,mCACE,qBAAKC,UAAU,mBAAf,SACE,cAAC,aAAD,CACEA,UAAU,SACVC,eARR,SAAsBC,EAAQlJ,EAAMY,GAClCmI,EAASnI,IAQHA,MAAOA,EACPuI,QAAS,CACPC,MAAM,EACNC,aAAa,EACbC,KAAMR,EACNS,cAAc,EACdC,MAAO,kB,eCqBJC,EA5CO,WAAO,IAAD,EACFhK,mBAAS,IADP,mBACnBiK,EADmB,KACbC,EADa,KAUpBC,EAAeC,iBAAO,MAmB5B,OAbAxJ,qBAAU,YALS,WACjB,IAAIyJ,EACFF,EAAaG,QAAQC,aAAeJ,EAAaG,QAAQE,aAC3DL,EAAaG,QAAQG,SAAS,EAAGJ,GAGjCK,KACC,CAACT,IAEJrJ,qBAAU,WAMR,OALA+J,eACErF,OAAOpD,SACP,SAACiH,GAAD,OAASe,GAAQ,SAACU,GAAD,4BAAkBA,GAAlB,CAA4BzB,UAC7C,GAEK,kBAAM0B,iBAAOvF,OAAOpD,YAC1B,IAGD,mCACE,qBAAKqH,UAAU,eAAeuB,IAAKX,EAAnC,SACE,cAAC,UAAD,CACEF,KAAMA,EACNc,QAAQ,OACRC,OAAO,oBACPC,OAjCc,CACpBC,sBAAuB,OACvBC,eAAgB,SAChBC,qBAAsB,mBACtBC,oBAAqB,qBACrBC,oBAAqB,oBA6BfC,eAAe,U,SCxCV,MAA0B,iCCA1B,MAA0B,iCC0C1BC,MAjCf,WAAgB,IAAD,EACWxL,mBAAS,IADpB,mBACNyL,EADM,KACAC,EADA,OAEO1L,mBAAS,IAFhB,mBAEN2L,EAFM,KAEFC,EAFE,KAQb,OACE,mCACE,sBAAKrC,UAAU,QAAf,UACE,oBAAIA,UAAU,QAAd,kCACA,sBAAKA,UAAU,YAAf,UACE,wBAAQA,UAAU,UAAUsC,QATpC,WACED,EAAMH,IAQA,iBAGA,cAAC,EAAD,CAAQpC,SAAS,SAASlI,MAAOsK,EAAMnC,SAAUoC,OAEnD,sBAAKnC,UAAU,cAAf,UACE,qBAAKA,UAAU,YAAf,SACE,cAACzJ,EAAA,EAAD,CAAcqB,MAAOwK,MAEvB,cAAC,EAAD,OAEF,sBAAKpC,UAAU,aAAf,UACE,qBAAKuC,IAAKC,EAAQC,IAAI,OACtB,qBAAKF,IAAKG,EAAMD,IAAI,gBC9B9BE,IAASC,OAEP,cAAC,EAAD,IAEAC,SAASC,eAAe,U","file":"static/js/main.cf4d489b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Example1 from './Example1.js';\r\nimport grammar from '../small.js';\r\nimport { prefunc as fityfunc } from './prefunc.js';\r\nimport 가람시 from '../data/weatherData.json';\r\nimport { Line } from 'react-chartjs-2';\r\nimport chartmaker from './chartmaker';\r\n\r\nconst nearley = require('nearley');\r\nconst generate = require('../generate.js').default;\r\n\r\nfunction Transcompile(props) {\r\n  const [database, setDatabase] = useState([]);\r\n  const [chartdatas, setChartdatas] = useState('');\r\n  const [chartshape, setChartshape] = useState('');\r\n  let data = [];\r\n  let keys;\r\n  let values;\r\n  let labels = '차트제목';\r\n  let shape = '';\r\n\r\n  useEffect(() => {\r\n    const parser = new nearley.Parser(nearley.Grammar.fromCompiled(grammar));\r\n    parser.feed(props.value);\r\n    const parserResult = parser.results;\r\n    if (parserResult[0] !== undefined) {\r\n      const line = generate(parserResult[0][0]);\r\n      const lines = line.concat('\\n', fityfunc);\r\n      try {\r\n        let ww = 가람시;\r\n        eval(lines);\r\n      } catch (e) {\r\n        const newerror = reportError(e.message);\r\n        console.info(newerror);\r\n      }\r\n    } else {\r\n      console.info('문법을 다시 확인해보세요');\r\n    }\r\n\r\n    function reportError(e) {\r\n      if (e.includes('defined') === true) {\r\n        const newerror = e.replace('is not defined', '는 정의되지 않았습니다.');\r\n        return newerror;\r\n      } else if (e.includes('undefined') === true) {\r\n        const newerror = e.replace('undefined', '바꿨다시발');\r\n        return newerror;\r\n      }\r\n    }\r\n    setChartshape(shape);\r\n    setChartdatas(data);\r\n  }, [props.value]);\r\n\r\n  return (\r\n    <>\r\n      {chartmaker(chartshape, chartdatas)}\r\n      {/* <Line data={chartdatas} /> */}\r\n    </>\r\n  );\r\n}\r\nexport default React.memo(Transcompile);\r\n\r\n/* if (parserResult[0] != undefined) {\r\n      const line = generate(parserResult[0][0]);\r\n      const lines = line.concat('\\n', fityfunc);\r\n      eval(lines);\r\n    } else {\r\n      console.log('문법이 다시 살펴보세요(app.js)!');\r\n    } */\r\n\r\n/*     setA(`<html>\r\n      <body\r\n      \r\n      </body>\r\n      <script>console.log(\"a\")</script>\r\n    </html>`); */\r\n","/* eslint-disable no-undef */\r\n// Generated automatically by nearley, version 2.19.7\r\n// http://github.com/Hardmath123/nearley\r\n(function () {\r\n  function id(x) {\r\n    return x[0];\r\n  }\r\n\r\n  const mylexer = require('./lexer');\r\n  const wrapVariable = (name) => ({\r\n    label: 'atom',\r\n    type: 'variable',\r\n    value: name,\r\n  });\r\n  var grammar = {\r\n    Lexer: mylexer,\r\n    ParserRules: [\r\n      { name: 'statements', symbols: ['closure'], postprocess: id },\r\n      { name: 'closure$ebnf$1', symbols: [] },\r\n      {\r\n        name: 'closure$ebnf$1',\r\n        symbols: ['closure$ebnf$1', 'statement'],\r\n        postprocess: function arrpush(d) {\r\n          return d[0].concat([d[1]]);\r\n        },\r\n      },\r\n      {\r\n        name: 'closure',\r\n        symbols: ['closure$ebnf$1'],\r\n        postprocess: (data) => [\r\n          {\r\n            label: 'closure',\r\n            type: 'closure',\r\n            statements: data[0],\r\n          },\r\n        ],\r\n      },\r\n      { name: 'statement', symbols: ['var_assign', '_m'], postprocess: id },\r\n      { name: 'statement', symbols: ['fun_call', '_m'], postprocess: id },\r\n      { name: 'statement', symbols: ['if_state', '_m'], postprocess: id },\r\n      { name: 'statement', symbols: ['for_state', '_m'], postprocess: id },\r\n      { name: 'statement', symbols: ['return', '_m'], postprocess: id },\r\n      {\r\n        name: 'var_assign',\r\n        symbols: [\r\n          mylexer.has('identifier') ? { type: 'identifier' } : identifier,\r\n          '_',\r\n          { literal: '=' },\r\n          '_',\r\n          'expr',\r\n        ],\r\n        postprocess: (data) => {\r\n          return {\r\n            label: 'state',\r\n            type: 'var_assign',\r\n            var_name: data[0],\r\n            value: data[4],\r\n          };\r\n        },\r\n      },\r\n      {\r\n        name: 'var_assign',\r\n        symbols: [\r\n          mylexer.has('identifier') ? { type: 'identifier' } : identifier,\r\n          '_',\r\n          { literal: '=' },\r\n          '_',\r\n          'array',\r\n        ],\r\n        postprocess: (data) => {\r\n          return {\r\n            label: 'state',\r\n            type: 'array',\r\n            array_name: data[0],\r\n            array_value: data[4],\r\n          };\r\n        },\r\n      },\r\n      { name: 'fun_call$ebnf$1$subexpression$1', symbols: ['arg_list', '_'] },\r\n      {\r\n        name: 'fun_call$ebnf$1',\r\n        symbols: ['fun_call$ebnf$1$subexpression$1'],\r\n        postprocess: id,\r\n      },\r\n      {\r\n        name: 'fun_call$ebnf$1',\r\n        symbols: [],\r\n        postprocess: function (d) {\r\n          return null;\r\n        },\r\n      },\r\n      {\r\n        name: 'fun_call',\r\n        symbols: [\r\n          mylexer.has('identifier') ? { type: 'identifier' } : identifier,\r\n          '_',\r\n          { literal: '(' },\r\n          '_',\r\n          'fun_call$ebnf$1',\r\n          { literal: ')' },\r\n        ],\r\n        postprocess: (data) => {\r\n          return {\r\n            label: 'state',\r\n            type: 'fun_call',\r\n            fun_name: data[0],\r\n            arguments: data[4] ? data[4][0] : [],\r\n          };\r\n        },\r\n      },\r\n      {\r\n        name: 'if_state',\r\n        symbols: [\r\n          { literal: '만약' },\r\n          '_',\r\n          'condition',\r\n          mylexer.has('eol') ? { type: 'eol' } : eol,\r\n          mylexer.has('indent') ? { type: 'indent' } : indent,\r\n          'closure',\r\n        ],\r\n        postprocess: (data) => {\r\n          return {\r\n            label: 'state',\r\n            type: 'ifstate',\r\n            first_condition: data[2],\r\n            first_statement: [...data[5]],\r\n\r\n            has_middle_condition: false,\r\n            middle_statement: undefined,\r\n\r\n            has_last_statement: false,\r\n            last_statement: undefined,\r\n          };\r\n        },\r\n      },\r\n      {\r\n        name: 'if_state',\r\n        symbols: [\r\n          { literal: '만약' },\r\n          '_',\r\n          'condition',\r\n          mylexer.has('eol') ? { type: 'eol' } : eol,\r\n          mylexer.has('indent') ? { type: 'indent' } : indent,\r\n          'closure',\r\n          mylexer.has('dedent') ? { type: 'dedent' } : dedent,\r\n          { literal: '거짓' },\r\n          '_',\r\n          mylexer.has('eol') ? { type: 'eol' } : eol,\r\n          mylexer.has('indent') ? { type: 'indent' } : indent,\r\n          'closure',\r\n        ],\r\n        postprocess: (data) => {\r\n          return {\r\n            label: 'state',\r\n            type: 'ifstate',\r\n            first_condition: data[2],\r\n            first_statement: data[5],\r\n\r\n            has_middle_condition: false,\r\n            middle_statement: undefined,\r\n\r\n            has_last_statement: true,\r\n            last_statement: [...data[11]],\r\n          };\r\n        },\r\n      },\r\n      { name: 'if_state$ebnf$1', symbols: [] },\r\n      {\r\n        name: 'if_state$ebnf$1$subexpression$1',\r\n        symbols: [\r\n          { literal: '아니면' },\r\n          '_',\r\n          'condition',\r\n          mylexer.has('eol') ? { type: 'eol' } : eol,\r\n          mylexer.has('indent') ? { type: 'indent' } : indent,\r\n          'closure',\r\n          mylexer.has('dedent') ? { type: 'dedent' } : dedent,\r\n        ],\r\n      },\r\n      {\r\n        name: 'if_state$ebnf$1',\r\n        symbols: ['if_state$ebnf$1', 'if_state$ebnf$1$subexpression$1'],\r\n        postprocess: function arrpush(d) {\r\n          return d[0].concat([d[1]]);\r\n        },\r\n      },\r\n      {\r\n        name: 'if_state',\r\n        symbols: [\r\n          { literal: '만약' },\r\n          '_',\r\n          'condition',\r\n          mylexer.has('eol') ? { type: 'eol' } : eol,\r\n          mylexer.has('indent') ? { type: 'indent' } : indent,\r\n          'closure',\r\n          mylexer.has('dedent') ? { type: 'dedent' } : dedent,\r\n          'if_state$ebnf$1',\r\n          { literal: '아니면' },\r\n          '_',\r\n          'condition',\r\n          mylexer.has('eol') ? { type: 'eol' } : eol,\r\n          mylexer.has('indent') ? { type: 'indent' } : indent,\r\n          'closure',\r\n        ],\r\n        postprocess: (data) => {\r\n          return {\r\n            label: 'state',\r\n            type: 'ifstate',\r\n            first_condition: data[2],\r\n            first_statement: data[5],\r\n\r\n            has_middle_condition: true,\r\n            middle_condition: [...data[7].map((value) => value[2]), data[10]],\r\n            middle_statement: [...data[7].map((value) => value[5]), data[13]],\r\n\r\n            has_last_condition: false,\r\n            last_statement: undefined,\r\n          };\r\n        },\r\n      },\r\n      {\r\n        name: 'if_state$ebnf$2$subexpression$1',\r\n        symbols: [\r\n          { literal: '아니면' },\r\n          '_',\r\n          'condition',\r\n          mylexer.has('eol') ? { type: 'eol' } : eol,\r\n          mylexer.has('indent') ? { type: 'indent' } : indent,\r\n          'closure',\r\n          mylexer.has('dedent') ? { type: 'dedent' } : dedent,\r\n        ],\r\n      },\r\n      { name: 'if_state$ebnf$2', symbols: ['if_state$ebnf$2$subexpression$1'] },\r\n      {\r\n        name: 'if_state$ebnf$2$subexpression$2',\r\n        symbols: [\r\n          { literal: '아니면' },\r\n          '_',\r\n          'condition',\r\n          mylexer.has('eol') ? { type: 'eol' } : eol,\r\n          mylexer.has('indent') ? { type: 'indent' } : indent,\r\n          'closure',\r\n          mylexer.has('dedent') ? { type: 'dedent' } : dedent,\r\n        ],\r\n      },\r\n      {\r\n        name: 'if_state$ebnf$2',\r\n        symbols: ['if_state$ebnf$2', 'if_state$ebnf$2$subexpression$2'],\r\n        postprocess: function arrpush(d) {\r\n          return d[0].concat([d[1]]);\r\n        },\r\n      },\r\n      {\r\n        name: 'if_state',\r\n        symbols: [\r\n          { literal: '만약' },\r\n          '_',\r\n          'condition',\r\n          mylexer.has('eol') ? { type: 'eol' } : eol,\r\n          mylexer.has('indent') ? { type: 'indent' } : indent,\r\n          'closure',\r\n          mylexer.has('dedent') ? { type: 'dedent' } : dedent,\r\n          'if_state$ebnf$2',\r\n          { literal: '거짓' },\r\n          '_',\r\n          mylexer.has('eol') ? { type: 'eol' } : eol,\r\n          mylexer.has('indent') ? { type: 'indent' } : indent,\r\n          'closure',\r\n        ],\r\n        postprocess: (data) => {\r\n          return {\r\n            label: 'state',\r\n            type: 'ifstate',\r\n            first_condition: data[2],\r\n            first_statement: data[5],\r\n\r\n            has_middle_condition: true,\r\n            middle_condition: [...data[7].map((value) => value[2])],\r\n            middle_statement: [...data[7].map((value) => value[5])],\r\n\r\n            has_last_statement: true,\r\n            last_statement: [...data[12]],\r\n          };\r\n        },\r\n      },\r\n      {\r\n        name: 'condition',\r\n        symbols: [\r\n          'expr',\r\n          '_',\r\n          mylexer.has('operator') ? { type: 'operator' } : operator,\r\n          '_',\r\n          'expr',\r\n        ],\r\n        postprocess: (data) => {\r\n          return {\r\n            type: 'condition',\r\n            value: [data[0], data[2], data[4]],\r\n          };\r\n        },\r\n      },\r\n      {\r\n        name: 'arg_list',\r\n        symbols: ['expr'],\r\n        postprocess: (data) => {\r\n          return [data[0]];\r\n        },\r\n      },\r\n      {\r\n        name: 'arg_list',\r\n        symbols: ['arg_list', '__', 'expr'],\r\n        postprocess: (data) => {\r\n          return [...data[0], data[2]];\r\n        },\r\n      },\r\n      { name: 'array$ebnf$1', symbols: [] },\r\n      {\r\n        name: 'array$ebnf$1$subexpression$1',\r\n        symbols: [{ literal: ',' }, '_', 'expr'],\r\n      },\r\n      {\r\n        name: 'array$ebnf$1',\r\n        symbols: ['array$ebnf$1', 'array$ebnf$1$subexpression$1'],\r\n        postprocess: function arrpush(d) {\r\n          return d[0].concat([d[1]]);\r\n        },\r\n      },\r\n      {\r\n        name: 'array',\r\n        symbols: [\r\n          { literal: '[' },\r\n          '_',\r\n          'expr',\r\n          '_',\r\n          'array$ebnf$1',\r\n          '_',\r\n          { literal: ']' },\r\n        ],\r\n        postprocess: (data) => {\r\n          return [data[2], ...data[4].map((v) => v[2])];\r\n        },\r\n      },\r\n      {\r\n        name: 'expr',\r\n        symbols: [mylexer.has('string') ? { type: 'string' } : string],\r\n        postprocess: id,\r\n      },\r\n      {\r\n        name: 'expr',\r\n        symbols: [\r\n          mylexer.has('identifier') ? { type: 'identifier' } : identifier,\r\n        ],\r\n        postprocess: id,\r\n      },\r\n      { name: 'expr', symbols: ['fun_call'], postprocess: id },\r\n      { name: 'expr', symbols: ['AS'], postprocess: id },\r\n      {\r\n        name: 'for_state',\r\n        symbols: [\r\n          { literal: '반복' },\r\n          '__',\r\n          'expr',\r\n          '_',\r\n          mylexer.has('iterator') ? { type: 'iterator' } : iterator,\r\n          '_',\r\n          'expr',\r\n          mylexer.has('eol') ? { type: 'eol' } : eol,\r\n          mylexer.has('indent') ? { type: 'indent' } : indent,\r\n          'closure',\r\n        ],\r\n        postprocess: (data) => {\r\n          return {\r\n            label: 'statement',\r\n            type: 'for_block',\r\n            a: data[2],\r\n            iterator: data[4],\r\n            b: data[6],\r\n            statement: data[9],\r\n          };\r\n        },\r\n      },\r\n      {\r\n        name: 'return',\r\n        symbols: [{ literal: '출력' }, '_', 'expr'],\r\n        postprocess: (d) => {\r\n          return { type: 'return', value: d[2] };\r\n        },\r\n      },\r\n      {\r\n        name: 'P',\r\n        symbols: [{ literal: '(' }, '_', 'AS', '_', { literal: ')' }],\r\n        postprocess: (d) => {\r\n          return d[2];\r\n        },\r\n      },\r\n      { name: 'P', symbols: ['number'], postprocess: id },\r\n      { name: 'MD', symbols: ['P'], postprocess: id },\r\n      {\r\n        name: 'MD',\r\n        symbols: ['MD', '_', { literal: '*' }, '_', 'P'],\r\n        postprocess: (d) => {\r\n          return [d[0], d[2], d[4]];\r\n        },\r\n      },\r\n      {\r\n        name: 'MD',\r\n        symbols: ['MD', '_', { literal: '/' }, '_', 'P'],\r\n        postprocess: (d) => {\r\n          return [d[0], d[2], d[4]];\r\n        },\r\n      },\r\n      { name: 'AS', symbols: ['MD'], postprocess: id },\r\n      {\r\n        name: 'AS',\r\n        symbols: ['AS', '_', { literal: '+' }, '_', 'MD'],\r\n        postprocess: (d) => {\r\n          return [d[0], d[2], d[4]];\r\n        },\r\n      },\r\n      {\r\n        name: 'AS',\r\n        symbols: ['AS', '_', { literal: '-' }, '_', 'MD'],\r\n        postprocess: (d) => {\r\n          return [d[0], d[2], d[4]];\r\n        },\r\n      },\r\n      {\r\n        name: 'cal',\r\n        symbols: [\r\n          mylexer.has('calculator') ? { type: 'calculator' } : calculator,\r\n        ],\r\n        postprocess: id,\r\n      },\r\n      {\r\n        name: 'number',\r\n        symbols: [mylexer.has('number') ? { type: 'number' } : number],\r\n        postprocess: id,\r\n      },\r\n      { name: 'number', symbols: ['float'], postprocess: id },\r\n      {\r\n        name: 'float',\r\n        symbols: [\r\n          mylexer.has('number') ? { type: 'number' } : number,\r\n          { literal: '.' },\r\n          mylexer.has('number') ? { type: 'number' } : number,\r\n        ],\r\n        postprocess: (d) => ({\r\n          label: 'atom',\r\n          type: 'float',\r\n          value: d[0] + d[1] + d[2],\r\n        }),\r\n      },\r\n      { name: '_$ebnf$1', symbols: [] },\r\n      {\r\n        name: '_$ebnf$1',\r\n        symbols: ['_$ebnf$1', mylexer.has('ws') ? { type: 'ws' } : ws],\r\n        postprocess: function arrpush(d) {\r\n          return d[0].concat([d[1]]);\r\n        },\r\n      },\r\n      { name: '_', symbols: ['_$ebnf$1'] },\r\n      { name: '__$ebnf$1', symbols: [mylexer.has('ws') ? { type: 'ws' } : ws] },\r\n      {\r\n        name: '__$ebnf$1',\r\n        symbols: ['__$ebnf$1', mylexer.has('ws') ? { type: 'ws' } : ws],\r\n        postprocess: function arrpush(d) {\r\n          return d[0].concat([d[1]]);\r\n        },\r\n      },\r\n      { name: '__', symbols: ['__$ebnf$1'] },\r\n      { name: '_m$ebnf$1', symbols: [] },\r\n      {\r\n        name: '_m$ebnf$1',\r\n        symbols: ['_m$ebnf$1', mylexer.has('ws') ? { type: 'ws' } : ws],\r\n        postprocess: function arrpush(d) {\r\n          return d[0].concat([d[1]]);\r\n        },\r\n      },\r\n      {\r\n        name: '_m$subexpression$1$ebnf$1',\r\n        symbols: [mylexer.has('eol') ? { type: 'eol' } : eol],\r\n      },\r\n      {\r\n        name: '_m$subexpression$1$ebnf$1',\r\n        symbols: [\r\n          '_m$subexpression$1$ebnf$1',\r\n          mylexer.has('eol') ? { type: 'eol' } : eol,\r\n        ],\r\n        postprocess: function arrpush(d) {\r\n          return d[0].concat([d[1]]);\r\n        },\r\n      },\r\n      { name: '_m$subexpression$1', symbols: ['_m$subexpression$1$ebnf$1'] },\r\n      {\r\n        name: '_m$subexpression$1',\r\n        symbols: [mylexer.has('dedent') ? { type: 'dedent' } : dedent],\r\n      },\r\n      { name: '_m', symbols: ['_m$ebnf$1', '_m$subexpression$1'] },\r\n    ],\r\n    ParserStart: 'statements',\r\n  };\r\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\r\n    module.exports = grammar;\r\n  } else {\r\n    window.grammar = grammar;\r\n  }\r\n})();\r\nexport default grammar;\r\n","export const prefunc = `function 화면(...arg) {\r\n        console.log(...arg)\r\n      };\r\n      function 자료(...arg){\r\n       data =[...arg]   \r\n       const getV = (object, path) =>\r\n       path.reduce((result, key) => (result || {})[key], object)\r\n       let results=getV(ww,data)   \r\n       return results\r\n      }\r\n      function 막대그래프(inputs){\r\n               data=inputs\r\n               shape='막대그래프'\r\n      }\r\n      function 꺽은선그래프(chartdata,label='그래프'){\r\n        keys=Object.getOwnPropertyNames(chartdata)\r\n        values=keys.map(e=>chartdata[e])\r\n        labels=label\r\n        shape='꺽은선그래프'       \r\n      }\r\n      function 원그래프(inputs){\r\n        data=inputs\r\n        shape='원그래프'       \r\n      }\r\n      function 믹서기(...arg){\r\n        let mixerinput =[...arg]    \r\n        if(mixerinput.length == 2){\r\n          return '🍷' \r\n        }else if(mixerinput.length > 2){\r\n          return '🍹' \r\n        }else if(mixerinput.length == 1){\r\n          return '🥤'\r\n        }\r\n      }\r\n    `;\r\n","import React from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  BarChart,\r\n  Bar,\r\n  AreaChart,\r\n  Area,\r\n  PieChart,\r\n  Pie,\r\n  Sector,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n} from 'recharts';\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\r\nconst RADIAN = Math.PI / 180;\r\nconst renderCustomizedLabel = ({\r\n  cx,\r\n  cy,\r\n  midAngle,\r\n  innerRadius,\r\n  outerRadius,\r\n  percent,\r\n  index,\r\n}) => {\r\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n  return (\r\n    <text\r\n      x={x}\r\n      y={y}\r\n      fill=\"white\"\r\n      textAnchor={x > cx ? 'start' : 'end'}\r\n      dominantBaseline=\"central\"\r\n    >\r\n      {`${(percent * 100).toFixed(0)}%`}\r\n    </text>\r\n  );\r\n};\r\n\r\nexport default function chartmaker(name, data) {\r\n  if (name === '막대그래프') {\r\n    return (\r\n      <div>\r\n        <h2>CHART</h2>\r\n        <BarChart\r\n          width={600}\r\n          height={300}\r\n          data={data}\r\n          margin={{ top: 20, right: 20, left: 10, bottom: 5 }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Bar dataKey={Object.keys(data[0])[1]} stackId=\"a\" fill=\"#8884d8\" />\r\n          <Bar dataKey={Object.keys(data[0])[2]} stackId=\"a\" fill=\"#82ca9d\" />\r\n          <Bar dataKey={Object.keys(data[0])[3]} stackId=\"a\" fill=\"#41ca9d\" />\r\n        </BarChart>\r\n      </div>\r\n    );\r\n  } else if (name === '꺽은선그래프') {\r\n    return (\r\n      <div>\r\n        <h2>CHART</h2>\r\n        {/* <Line\r\n          data={data}\r\n          width={100}\r\n          height={50}\r\n          options={{\r\n            maintainAspectRatio: false,\r\n          }}\r\n        /> */}\r\n      </div>\r\n    );\r\n  } else if (name === '원그래프') {\r\n    return (\r\n      <div>\r\n        <h2>CHART</h2>\r\n        <PieChart width={450} height={400} /* onMouseEnter={onPieEnter} */>\r\n          <Pie\r\n            data={data}\r\n            cx={270}\r\n            cy={150}\r\n            labelLine={false}\r\n            label={renderCustomizedLabel}\r\n            outerRadius={150}\r\n            fill=\"#8884d8\"\r\n          >\r\n            {data.map((entry, index) => (\r\n              <Cell fill={COLORS[index % COLORS.length]} />\r\n            ))}\r\n          </Pie>\r\n          <Tooltip />\r\n        </PieChart>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <h2>chart</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const IndentifyLexer = require('@shieldsbetter/nearley-indentify');\r\n\r\nconst indentifiedLexer = new IndentifyLexer(mooLexer());\r\n\r\nfunction mooLexer() {\r\n  return require('moo').compile({\r\n    ws: /[ \\t]+/,\r\n    nl: { match: /\\n/, lineBreaks: true },\r\n    comment: /\\/\\/.*?$/,\r\n    number: /0|[1-9][0-9]*/,\r\n    string: /'(?:\\\\['\\\\]|[^\\n'\\\\])*'/,\r\n    iterator: '<-',\r\n    operator: ['==', '>=', '<=', '!=', '>', '<', '.', ','],\r\n    calculator: ['+', '-', '*', '/', '++', '--'],\r\n    lparen: '(',\r\n    rparen: ')',\r\n    lbracke: '[',\r\n    rbracke: ']',\r\n    lbrace: '{',\r\n    rbrace: '}',\r\n    identifier: /[a-zA-Z가-힣][a-zA-Z가-힣_0-9]*/,\r\n    fatarrow: '=>',\r\n    assign: '=',\r\n    keyword: ['만약', '반복'],\r\n  });\r\n}\r\n\r\n/* indentifiedLexer.reset(`\r\n    Hello World\r\n        Heres some\r\n        indentation\r\n    And dedentation\r\n`);\r\n\r\nlet token = indentifiedLexer.next();\r\nwhile (token) {\r\n  console.log({ type: token.type, value: token.value });\r\n\r\n  token = indentifiedLexer.next();\r\n} */\r\n\r\nmodule.exports = indentifiedLexer;\r\n\r\n/* async function main() {\r\n  //prettier-ignore\r\n  const code = (await fs.readFile(\"ex2.small\")).toString();\r\n  lexer.reset(code);\r\n  while (true) {\r\n    const token = lexer.next();\r\n    if (!token) {\r\n      break;\r\n    }\r\n    console.log(token);\r\n  }\r\n}\r\n\r\nmain().catch((err) => console.log(err.stack)); */\r\n","function generateJsForStatements(statements) {\r\n  const lines = [];\r\n  for (let statement of statements) {\r\n    const line = tp(statement);\r\n    lines.push(line);\r\n  }\r\n  return lines.join('\\n');\r\n}\r\nfunction tp(node) {\r\n  if (node.type === 'closure') {\r\n    return `${node.statements.map((d) => tp(d)).join('\\n')}`;\r\n  } else if (node.type === 'var_assign') {\r\n    const varName = node.var_name.value;\r\n    const jsExpr = tp(node.value);\r\n    const js = `var ${varName} = ${jsExpr}`;\r\n    return js;\r\n  } else if (node.type === 'fun_call') {\r\n    const funName = node.fun_name.value;\r\n    const arg_list = node.arguments\r\n      .map((arg) => {\r\n        return tp(arg);\r\n      })\r\n      .join(',');\r\n    return `${funName}(${arg_list})`;\r\n  } else if (node.type === 'ifstate') {\r\n    if (node.has_middle_condition && node.has_last_statement) {\r\n      return `if(${tp(node.first_condition)}) {\r\n      ${tp(...node.first_statement)}}\r\n      ${node.middle_condition\r\n        .map((d, i) => `else if(${tp(d)}) {${tp(...node.middle_statement[i])}}`)\r\n        .join('\\n')}\r\n      else {${tp(...node.last_statement)}}\r\n      `;\r\n    } else if (node.has_middle_condition && !node.has_last_statement) {\r\n      return `if(${tp(node.first_condition)}) {\r\n      ${tp(...node.first_statement)}}\r\n      ${node.middle_condition\r\n        .map((d, i) => `else if(${tp(d)}) {${tp(...node.middle_statement[i])}}`)\r\n        .join('\\n')}`;\r\n    } else if (!node.has_middle_condition && node.has_last_statement) {\r\n      return `if(${tp(node.first_condition)}) {\r\n      ${tp(...node.first_statement)}}\r\n      else {${tp(...node.last_statement)}}`;\r\n    } else {\r\n      return `if(${tp(node.first_condition)}) {\r\n      ${tp(...node.first_statement)}}`;\r\n    }\r\n  } else if (node.type === 'condition') {\r\n    return node.value.map((d) => tp(d)).join('');\r\n  } else if (node.type === 'array') {\r\n    const arrayname = node.array_name.value;\r\n    return `var ${arrayname}=[${node.array_value\r\n      .map((d) => {\r\n        return tp(d);\r\n      })\r\n      .join(',')}]`;\r\n  } else if (node.type === 'for_block') {\r\n    const a = node.a.value;\r\n    const b = node.b.value;\r\n    return `for (var ${a} in ${b}) {${tp(...node.statement)} };`;\r\n  } else if (node.type === 'return') {\r\n    return node.value;\r\n  } else if (node.type === 'operator') {\r\n    return node.value;\r\n  } else if (node.type === 'string') {\r\n    return node.value;\r\n  } else if (node.type === 'number') {\r\n    return node.value;\r\n  } else if (node.type === 'identifier') {\r\n    return node.value;\r\n  } else if (node.type === 'calculator') {\r\n    return node.value;\r\n  } else {\r\n    console.log('문법이 틀렸어요...');\r\n    /* throw new Error(`unhandled ast node type 11`); */\r\n  }\r\n}\r\n\r\nexport default tp;\r\n","import React, { useState } from 'react';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/material.css';\r\nimport 'codemirror/theme/dracula.css';\r\nimport 'codemirror/mode/xml/xml';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport 'codemirror/mode/python/python';\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2';\r\n\r\nfunction Editor(props) {\r\n  const { language, value, onChange } = props;\r\n  function handlechange(editor, data, value) {\r\n    onChange(value);\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"editor_container\">\r\n        <ControlledEditor\r\n          className=\"editor\"\r\n          onBeforeChange={handlechange}\r\n          value={value}\r\n          options={{\r\n            lint: true,\r\n            lineNumbers: true,\r\n            mode: language,\r\n            lineWrapping: true,\r\n            theme: 'dracula',\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Editor;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Console, Hook, Unhook } from 'console-feed';\r\n\r\nconst LogsContainer = () => {\r\n  const [logs, setLogs] = useState([]);\r\n\r\n  const consoleStyles = {\r\n    BASE_BACKGROUND_COLOR: 'none',\r\n    BASE_FONT_SIZE: '1.2rem',\r\n    LOG_ERROR_BACKGROUND: 'rgba(255,0,0,.1)',\r\n    LOG_WARN_BACKGROUND: 'rgba(255,255,0,.1)',\r\n    LOG_INFO_BACKGROUND: 'rgba(0,0,255,.1)',\r\n  };\r\n  const scrollbottom = useRef(null);\r\n  const scrollexec = () => {\r\n    let scroll =\r\n      scrollbottom.current.scrollHeight - scrollbottom.current.clientHeight;\r\n    scrollbottom.current.scrollTo(0, scroll);\r\n  };\r\n  useEffect(() => {\r\n    scrollexec();\r\n  }, [logs]);\r\n  // run once!\r\n  useEffect(() => {\r\n    Hook(\r\n      window.console,\r\n      (log) => setLogs((currLogs) => [...currLogs, log]),\r\n      false\r\n    );\r\n    return () => Unhook(window.console);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"console_pane\" ref={scrollbottom}>\r\n        <Console\r\n          logs={logs}\r\n          variant=\"dark\"\r\n          filter=\"Methods[log,info]\"\r\n          styles={consoleStyles}\r\n          searchKeywords=\"\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LogsContainer;\r\n","export default __webpack_public_path__ + \"static/media/map1.44f9f36c.png\";","export default __webpack_public_path__ + \"static/media/tree.a4f0a4d0.png\";","import Editor from './Editor.js';\nimport React, { useState } from 'react';\nimport LogsContainer from './components/LogsContainer.js';\nimport Transcompile from './components/Transcompile.js';\nimport images from './components/map1.png';\nimport tree from './components/tree.png';\n\n/* const grammar = require('./small.js'); */\n\nfunction App() {\n  const [code, setCode] = useState('');\n  const [ab, setAb] = useState('');\n\n  function sendcode() {\n    setAb(code);\n  }\n\n  return (\n    <>\n      <div className=\"panel\">\n        <h1 className=\"title\"> fitycode PLAYGROUND</h1>\n        <div className=\"left_pane\">\n          <button className=\"run_btn\" onClick={sendcode}>\n            RUN\n          </button>\n          <Editor language=\"python\" value={code} onChange={setCode} />\n        </div>\n        <div className=\"center_pane\">\n          <div className=\"data_pane\">\n            <Transcompile value={ab} />\n          </div>\n          <LogsContainer />\n        </div>\n        <div className=\"right_pane\">\n          <img src={images} alt=\"aa\" />\n          <img src={tree} alt=\"aa\" />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n/*    <iframe\n            srcDoc={a}\n            title=\"output\"\n            frameBorder=\"0\"\n            sandbox=\"allow-scripts\"\n            width=\"100%\"\n            height=\"100%\"\n          /> */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  //<React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}